---
// RestaurantHero.astro
export interface Props {
  title?: string;
  subtitle?: string;
  description?: string;
  primaryButtonText?: string;
  secondaryButtonText?: string;
  primaryButtonHref?: string;
  secondaryButtonHref?: string;
  stats?: Array<{ number: string; label: string }>;
}

const {
  title = "Exceptional Cuisine. Unforgettable Moments.",
  subtitle = "Where Every Dish Tells a Story of Passion and Flavor",
  description = "Experience culinary artistry in an atmosphere of warmth and elegance. Our chef-crafted menu features locally sourced ingredients, innovative techniques, and timeless recipes passed down through generations.",
  primaryButtonText = "Reserve Table",
  secondaryButtonText = "View Menu",
  primaryButtonHref = "#reservation",
  secondaryButtonHref = "#menu",
  stats = [
    { number: "15+", label: "Years Excellence" },
    { number: "50K+", label: "Happy Guests" },
    { number: "4.9â˜…", label: "Average Rating" },
  ],
} = Astro.props;
---

<section class="hero">
  <div class="floating-elements">
    <div class="floating-element"></div>
    <div class="floating-element"></div>
    <div class="floating-element"></div>
  </div>

  <div class="hero-content">
    <h1>{title}</h1>
    <p class="subtitle">{subtitle}</p>
    <p class="description">{description}</p>

    <div class="cta-buttons">
      <a href={primaryButtonHref} class="btn btn-primary">
        <span>{primaryButtonText}</span>
      </a>
      <a href={secondaryButtonHref} class="btn btn-secondary">
        <span>{secondaryButtonText}</span>
      </a>
    </div>

    <div class="glass-card">
      <div class="stats">
        {
          stats.map((stat) => (
            <div class="stat">
              <span class="stat-number">{stat.number}</span>
              <span class="stat-label">{stat.label}</span>
            </div>
          ))
        }
      </div>
    </div>
  </div>

  <div class="scroll-indicator"></div>
</section>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  .hero {
    min-height: 100vh;
    background: linear-gradient(
      135deg,
      #2d1b35 0%,
      #8b4513 50%,
      #6e5f2c 55%,
      #0c0b05 100%
    );
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    margin-top:40px;
  }

  .hero::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(
        circle at 20% 50%,
        rgba(212, 175, 55, 0.3) 0%,
        transparent 50%
      ),
      radial-gradient(
        circle at 80% 20%,
        rgba(255, 255, 255, 0.15) 0%,
        transparent 50%
      ),
      radial-gradient(
        circle at 40% 80%,
        rgba(139, 69, 19, 0.2) 0%,
        transparent 50%
      );
    animation: float 20s ease-in-out infinite;
  }

  @keyframes float {
    0%,
    100% {
      transform: translateY(0px) rotate(0deg);
    }
    33% {
      transform: translateY(-20px) rotate(1deg);
    }
    66% {
      transform: translateY(10px) rotate(-1deg);
    }
  }

  .hero-content {
    position: relative;
    z-index: 2;
    text-align: center;
    max-width: 1200px;
    padding: 0 2rem;
    color: white;
    animation: fadeInUp 1s ease-out;
    margin-top: 30px;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(50px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .hero h1 {
    font-size: clamp(2.5rem, 8vw, 4.5rem);
    font-weight: 700;
    margin-bottom: 1.5rem;
    background: linear-gradient(45deg, #ffd700, #fff8dc, #d4af37);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    line-height: 1.2;
    font-family: "Georgia", "Times New Roman", serif;
  }

  .hero .subtitle {
    font-size: clamp(1.1rem, 3vw, 1.5rem);
    margin-bottom: 2rem;
    opacity: 0.95;
    font-weight: 300;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
    animation: fadeInUp 1s ease-out 0.2s both;
    font-style: italic;
    color: #f5f5dc;
  }

  .hero .description {
    font-size: clamp(1rem, 2.5vw, 1.2rem);
    margin-bottom: 3rem;
    opacity: 0.85;
    font-weight: 300;
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
    animation: fadeInUp 1s ease-out 0.4s both;
    line-height: 1.6;
  }

  .cta-buttons {
    display: flex;
    gap: 1.5rem;
    justify-content: center;
    flex-wrap: wrap;
    animation: fadeInUp 1s ease-out 0.6s both;
  }

  .btn {
    padding: 1rem 2.5rem;
    border: none;
    border-radius: 50px;
    font-size: 1.1rem;
    font-weight: 600;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .btn-primary {
    background: linear-gradient(45deg, #d4af37, #ffd700);
    color: #2d1b35;
    border: 2px solid transparent;
    box-shadow: 0 4px 15px rgba(212, 175, 55, 0.3);
  }

  .btn-primary:hover {
    background: linear-gradient(45deg, #ffd700, #fff8dc);
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(212, 175, 55, 0.4);
  }

  .btn-secondary {
    background: transparent;
    color: #ffd700;
    border: 2px solid #d4af37;
    backdrop-filter: blur(10px);
  }

  .btn-secondary:hover {
    background: rgba(212, 175, 55, 0.2);
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
    border-color: #ffd700;
  }

  .scroll-indicator {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    animation: bounce 2s infinite;
    opacity: 0.7;
  }

  @keyframes bounce {
    0%,
    20%,
    50%,
    80%,
    100% {
      transform: translateX(-50%) translateY(0);
    }
    40% {
      transform: translateX(-50%) translateY(-10px);
    }
    60% {
      transform: translateX(-50%) translateY(-5px);
    }
  }

  .scroll-indicator::after {
    content: "";
    width: 24px;
    height: 24px;
    border: 2px solid #d4af37;
    border-top: none;
    border-right: none;
    transform: rotate(-45deg);
    display: block;
  }

  .floating-elements {
    position: absolute;
    width: 100%;
    height: 100%;
    overflow: hidden;
    z-index: 1;
  }

  .floating-element {
    position: absolute;
    background: rgba(212, 175, 55, 0.15);
    border-radius: 50%;
    animation: floatRandom 15s ease-in-out infinite;
  }

  .floating-element:nth-child(1) {
    width: 80px;
    height: 80px;
    top: 20%;
    left: 10%;
    animation-delay: 0s;
  }

  .floating-element:nth-child(2) {
    width: 120px;
    height: 120px;
    top: 60%;
    right: 10%;
    animation-delay: -5s;
  }

  .floating-element:nth-child(3) {
    width: 60px;
    height: 60px;
    bottom: 20%;
    left: 20%;
    animation-delay: -10s;
  }

  @keyframes floatRandom {
    0%,
    100% {
      transform: translateY(0px) translateX(0px) rotate(0deg);
    }
    25% {
      transform: translateY(-20px) translateX(10px) rotate(90deg);
    }
    50% {
      transform: translateY(0px) translateX(-10px) rotate(180deg);
    }
    75% {
      transform: translateY(20px) translateX(5px) rotate(270deg);
    }
  }

  .glass-card {
    background: rgba(45, 27, 53, 0.3);
    backdrop-filter: blur(15px);
    border-radius: 20px;
    border: 1px solid rgba(212, 175, 55, 0.3);
    padding: 2rem;
    margin-top: 2rem;
    animation: fadeInUp 1s ease-out 0.8s both;
  }

  .stats {
    display: flex;
    justify-content: space-around;
    gap: 2rem;
    margin-top: 1rem;
  }

  .stat {
    text-align: center;
  }

  .stat-number {
    font-size: 2rem;
    font-weight: 700;
    display: block;
    color: #ffd700;
    margin-bottom: 0.5rem;
  }

  .stat-label {
    font-size: 0.9rem;
    opacity: 0.8;
    color: #f5f5dc;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  @media (max-width: 768px) {
    .hero-content {
      padding: 0 1rem;
    }

    .cta-buttons {
      flex-direction: column;
      align-items: center;
    }

    .btn {
      width: 100%;
      max-width: 300px;
      justify-content: center;
    }

    .stats {
      flex-direction: column;
      gap: 1.5rem;
    }

    .glass-card {
      padding: 1.5rem;
    }
  }
</style>

<script>
  // Add smooth scrolling for CTA buttons
  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", function (e) {
      e.preventDefault();
      const href = this.getAttribute("href");
      if (href) {
        const target = document.querySelector(href);
        if (target) {
          target.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });
        }
      }
    });
  });

  // Add parallax effect on scroll
  window.addEventListener("scroll", () => {
    const scrolled = window.pageYOffset;
    const parallaxElements = document.querySelectorAll(".floating-element");
    const speed = 0.5;

    parallaxElements.forEach((element) => {
      const htmlElement = element as HTMLElement;
      const yPos = -(scrolled * speed);
      htmlElement.style.transform = `translateY(${yPos}px)`;
    });
  });

  // Add intersection observer for animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: "0px 0px -50px 0px",
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const target = entry.target as HTMLElement;
        target.style.animationPlayState = "running";
      }
    });
  }, observerOptions);

  document.querySelectorAll(".hero-content > *").forEach((el) => {
    observer.observe(el);
  });
</script>
