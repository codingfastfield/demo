<div class="cont">
  <div class="timeline-container">
    <div class="timeline-line" id="timelineLine"></div>

    <div class="timeline-item left hidden" data-index="0">
      <div class="timeline-content">
        <h3>Corporate Law</h3>
        <p class="timeline-period">Business Legal Solutions</p>
        <p class="timeline-description">
          Comprehensive legal services for businesses including company
          incorporation, mergers & acquisitions, regulatory compliance, and
          commercial dispute resolution in Kenya.
        </p>
      </div>
    </div>

    <div class="timeline-item right hidden" data-index="1">
      <div class="timeline-content">
        <h3>Family Law</h3>
        <p class="timeline-period">Personal Legal Matters</p>
        <p class="timeline-description">
          Expert representation in matrimonial disputes, child custody cases,
          succession planning, and divorce proceedings with compassionate and
          confidential service.
        </p>
      </div>
    </div>

    <div class="timeline-item left hidden" data-index="2">
      <div class="timeline-content">
        <h3>Criminal Defense</h3>
        <p class="timeline-period">Legal Advocacy & Protection</p>
        <p class="timeline-description">
          Vigorous defense representation for criminal charges, bail
          applications, and appeals before Kenyan courts with a proven track
          record of successful outcomes.
        </p>
      </div>
    </div>

    <!-- Timeline nodes positioned absolutely relative to container -->
    <div class="timeline-node" data-node="0"></div>
    <div class="timeline-node" data-node="1"></div>
    <div class="timeline-node" data-node="2"></div>
  </div>
</div>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  .cont {
    /* background: var(--hero-bg); */
    width: 100%;
    /* height: 100%; */
    margin: 0;
    /* background: rgba(255, 255, 255, 0.1); */
  }

  .timeline-container {
    position: relative;
    margin: 6rem auto;
    padding: 4rem 0;
    width: 90%;
    max-width: 1000px;
    min-height: 800px;
    /* background: var(--hero-bg); */
  }

  /* Professional legal gradient line with gold accents */
  .timeline-line {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 3px;
    height: 0;
    background: linear-gradient(
      180deg,
      #d4af37 0%,
      #1e3a5f 25%,
      #2c5aa0 50%,
      #1e3a5f 75%,
      #d4af37 100%
    );
    border-radius: 4px;
    transition: height 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 1;
    box-shadow: 0 0 15px rgba(212, 175, 55, 0.4);
  }

  /* Timeline items */
  .timeline-item {
    position: relative;
    width: calc(50% - 40px);
    margin-bottom: 4rem;
    opacity: 0;
    transform: translateY(50px);
    transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .timeline-item.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .timeline-item.left {
    left: 0;
    text-align: right;
  }

  .timeline-item.right {
    left: calc(50% + 40px);
    text-align: left;
  }

  .timeline-content {
    background: linear-gradient(
      135deg,
      rgba(30, 58, 95, 0.95) 0%,
      rgba(20, 35, 55, 0.95) 100%
    );
    backdrop-filter: blur(20px);
    padding: 2rem;
    border-radius: 12px;
    border: 2px solid rgba(212, 175, 55, 0.3);
    box-shadow:
      0 20px 40px rgba(0, 0, 0, 0.4),
      0 0 0 1px rgba(212, 175, 55, 0.2),
      inset 0 1px 0 rgba(212, 175, 55, 0.1);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
  }

  .timeline-content::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(212, 175, 55, 0.6),
      transparent
    );
  }

  .timeline-content:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow:
      0 30px 60px rgba(0, 0, 0, 0.5),
      0 0 40px rgba(212, 175, 55, 0.3),
      0 0 0 1px rgba(212, 175, 55, 0.4),
      inset 0 1px 0 rgba(212, 175, 55, 0.2);
    border-color: rgba(212, 175, 55, 0.5);
  }

  .timeline-content h3 {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    background: linear-gradient(135deg, #d4af37 0%, #f5f5f0 50%, #d4af37 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    font-family: "Times New Roman", serif;
  }

  .timeline-period {
    font-size: 0.9rem;
    color: #d4af37;
    font-weight: 600;
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-family: "Georgia", serif;
  }

  .timeline-description {
    color: #e8e8e0;
    font-size: 1rem;
    line-height: 1.7;
    font-family: "Georgia", serif;
  }

  /* Timeline nodes - positioned absolutely and break the line */
  .timeline-node {
    position: absolute;
    left: 50%;
    width: 28px;
    height: 28px;
    background: #0f1419;
    border: 4px solid #d4af37;
    border-radius: 50%;
    transform: translateX(-50%) scale(0);
    z-index: 3;
    opacity: 0;
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow:
      0 0 0 0px rgba(212, 175, 55, 0),
      0 0 0px rgba(212, 175, 55, 0);
  }

  .timeline-node.revealed {
    opacity: 1;
    transform: translateX(-50%) scale(1);
    animation: nodeBreakIn 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  .timeline-node::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 12px;
    height: 12px;
    background: radial-gradient(circle, #d4af37 0%, #b8941f 100%);
    border-radius: 50%;
    box-shadow: 0 0 12px rgba(212, 175, 55, 0.8);
    animation: legalPulse 3s ease-in-out infinite;
  }

  /* Node break-in animation with legal theme */
  @keyframes nodeBreakIn {
    0% {
      transform: translateX(-50%) scale(0);
      box-shadow:
        0 0 0 0px rgba(212, 175, 55, 0),
        0 0 0px rgba(212, 175, 55, 0);
    }
    50% {
      transform: translateX(-50%) scale(1.2);
      box-shadow:
        0 0 0 12px rgba(212, 175, 55, 0.3),
        0 0 30px rgba(212, 175, 55, 0.6);
    }
    100% {
      transform: translateX(-50%) scale(1);
      box-shadow:
        0 0 0 6px rgba(212, 175, 55, 0.2),
        0 0 20px rgba(212, 175, 55, 0.4);
    }
  }

  @keyframes legalPulse {
    0%,
    100% {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1);
    }
    50% {
      opacity: 0.8;
      transform: translate(-50%, -50%) scale(1.1);
    }
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1);
    }
    50% {
      opacity: 0.7;
      transform: translate(-50%, -50%) scale(1.1);
    }
  }

  /* Position nodes at specific heights */
  .timeline-node[data-node="0"] {
    top: 100px;
  }
  .timeline-node[data-node="1"] {
    top: 280px;
  }
  .timeline-node[data-node="2"] {
    top: 460px;
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .timeline-container {
      margin: 4rem auto;
      padding: 2rem 0;
    }

    .timeline-item {
      width: calc(100% - 60px);
      text-align: left !important;
      left: 60px !important;
      margin-bottom: 3rem;
    }

    .timeline-line {
      left: 30px;
      transform: none;
    }

    .timeline-node {
      left: 30px;
      transform: translateX(-50%) scale(0);
    }

    .timeline-node.revealed {
      transform: translateX(-50%) scale(1);
    }

    .timeline-content {
      padding: 1.5rem;
      border-radius: 16px;
    }

    .timeline-content h3 {
      font-size: 1.3rem;
    }

    /* Adjust node positions for mobile */
    .timeline-node[data-node="0"] {
      top: 80px;
    }
    .timeline-node[data-node="1"] {
      top: 240px;
    }
    .timeline-node[data-node="2"] {
      top: 400px;
    }
  }

  /* Add professional legal background ambiance */
</style>

<script>
  window.addEventListener("DOMContentLoaded", () => {
    const line = document.getElementById("timelineLine");
    const container = document.querySelector(".timeline-container");
    const items = document.querySelectorAll(".timeline-item");
    const nodes = document.querySelectorAll(".timeline-node");

    // Early return with proper null checks
    if (!line || !container || !items.length || !nodes.length) {
      console.warn("Timeline elements not found");
      return;
    }

    // Initial state - ensure everything starts hidden
    items.forEach((item) => {
      if (item) item.classList.remove("visible");
    });
    nodes.forEach((node) => {
      if (node) node.classList.remove("revealed");
    });

    // Initial trigger
    handleScroll();

    window.addEventListener("scroll", handleScroll);

    function handleScroll() {
      // Additional null checks inside the function
      if (!container || !line) return;

      const rect = container.getBoundingClientRect();
      const windowHeight = window.innerHeight;

      // Calculate how much of the container is visible
      const containerTop = rect.top;
      const containerHeight = rect.height;
      const scrollProgress = Math.max(
        0,
        Math.min(
          1,
          (windowHeight - containerTop) / (windowHeight + containerHeight)
        )
      );

      // Animate line height with smooth easing
      let visibleHeight = Math.max(0, windowHeight - containerTop);
      let maxLineHeight = containerHeight * 0.85; // Don't let line go beyond last node
      let newHeight = Math.min(visibleHeight * 0.8, maxLineHeight);

      if (newHeight > 0) {
        line.style.height = newHeight + "px";
      }

      // Node positions relative to container (adjust these based on your content)
      const nodePositions = [100, 280, 460]; // Position of each node from container top

      // Check which nodes should be revealed/hidden based on line height and scroll position
      nodePositions.forEach((nodePos, index) => {
        const node = nodes[index];
        if (!node) return;

        // Calculate if this node should be visible
        const shouldBeVisible =
          newHeight >= nodePos - 20 && containerTop < windowHeight;
        const currentlyVisible = node.classList.contains("revealed");

        if (shouldBeVisible && !currentlyVisible) {
          // Reveal node when line reaches its position
          setTimeout(() => {
            if (node && newHeight >= nodePos - 20) {
              node.classList.add("revealed");
            }
          }, index * 50);
        } else if (!shouldBeVisible && currentlyVisible) {
          // Hide node when scrolling back up or container out of view
          node.classList.remove("revealed");
        }
      });

      // Reveal items based on their position - with reset functionality
      items.forEach((item, index) => {
        if (!item) return;

        const itemRect = item.getBoundingClientRect();
        const triggerPoint = windowHeight - 120;
        const resetPoint = windowHeight + 100; // Point where item goes out of view

        if (itemRect.top < triggerPoint && itemRect.bottom > 0) {
          // Item is in view - add visible class with delay if not already visible
          if (!item.classList.contains("visible")) {
            setTimeout(() => {
              if (item) {
                item.classList.add("visible");
              }
            }, index * 100);
          }
        } else if (itemRect.top > resetPoint || itemRect.bottom < -100) {
          // Item is far out of view - remove visible class to reset animation
          item.classList.remove("visible");
        }
      });
    }
  });
</script>
