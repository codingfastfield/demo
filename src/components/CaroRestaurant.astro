---
// RestaurantCarousel.astro - Sleek restaurant experiences carousel
const {
  experiences = [
    {
      title: "Chef's Tasting Menu",
      blurb:
        "Embark on a culinary journey with our signature 7-course tasting menu, featuring seasonal ingredients and innovative techniques that showcase our chef's artistry.",
      cta: "Reserve Now",
      icon: "üë®‚Äçüç≥",
      price: "Starting at $125",
    },
    {
      title: "Wine & Dine Experience",
      blurb:
        "Discover perfect pairings with our sommelier-curated wine selection. Each dish is expertly matched with premium wines from our extensive cellar.",
      cta: "Book Table",
      icon: "üç∑",
      price: "From $95",
    },
    {
      title: "Private Chef's Table",
      blurb:
        "Enjoy an intimate dining experience at our exclusive chef's table. Watch culinary magic happen while savoring personalized dishes crafted just for you.",
      cta: "Inquire",
      icon: "ü•ò",
      price: "From $200",
    },
    {
      title: "Farm-to-Table Feast",
      blurb:
        "Experience the freshest flavors with ingredients sourced directly from local farms. Our seasonal menu celebrates the best of regional produce.",
      cta: "View Menu",
      icon: "üå±",
      price: "Market Price",
    },
    {
      title: "Artisan Pizza Night",
      blurb:
        "Join us for authentic wood-fired pizzas made with house-made dough, San Marzano tomatoes, and the finest imported cheeses and meats.",
      cta: "Order Now",
      icon: "üçï",
      price: "From $18",
    },
    {
      title: "Seafood Spectacular",
      blurb:
        "Dive into our ocean-fresh seafood selection, featuring daily catches prepared with Mediterranean flair and served with stunning harbor views.",
      cta: "See Today's Catch",
      icon: "ü¶û",
      price: "Market Fresh",
    },
    {
      title: "Sunday Brunch Buffet",
      blurb:
        "Indulge in our lavish weekend brunch buffet featuring made-to-order omelets, fresh pastries, mimosas, and international breakfast favorites.",
      cta: "Book Brunch",
      icon: "ü•ê",
      price: "$45 per person",
    },
    {
      title: "Dessert & Coffee Bar",
      blurb:
        "End your meal on a sweet note with our artisanal desserts and specialty coffee bar, featuring house-made pastries and single-origin coffees.",
      cta: "Sweet Treats",
      icon: "üç∞",
      price: "From $12",
    },
    {
      title: "Cocktail Masterclass",
      blurb:
        "Learn the art of mixology with our head bartender. Create classic cocktails and discover new favorites in our interactive cocktail experience.",
      cta: "Join Class",
      icon: "üç∏",
      price: "$75 per person",
    },
    {
      title: "Private Events",
      blurb:
        "Celebrate special occasions in style with our customizable private dining packages. Perfect for birthdays, anniversaries, and corporate events.",
      cta: "Plan Event",
      icon: "üéâ",
      price: "Custom Quote",
    },
  ],
  autoplayDelay = 6000,
  showDots = true,
  theme = "warm", // 'warm', 'elegant', or 'modern'
} = Astro.props;
---

<section class={`restaurant-carousel ${theme}`} data-carousel>
  <div class="carousel-container">
    <button
      class="carousel-btn carousel-btn--prev"
      data-prev-btn
      aria-label="Previous dining experiences"
      type="button"
    >
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
        <path
          d="M15 18L9 12L15 6"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg>
    </button>

    <div class="carousel-viewport" data-viewport>
      <div class="carousel-track" data-track>
        <!-- Cards will be generated by JavaScript -->
      </div>
    </div>

    <button
      class="carousel-btn carousel-btn--next"
      data-next-btn
      aria-label="Next dining experiences"
      type="button"
    >
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
        <path
          d="M9 18L15 12L9 6"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg>
    </button>
  </div>

  {showDots && (
    <div class="carousel-dots" data-dots>
      <!-- Dots will be generated by JavaScript -->
    </div>
  )}
</section>

<style>
  :root {
    --carousel-border-radius: 24px;
    --carousel-shadow: 0 20px 40px -12px rgba(0, 0, 0, 0.15);
    --carousel-transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    --card-hover-scale: 1.03;
    --card-spacing: 1.5rem;
  }

  .restaurant-carousel {
    position: relative;
    width: 100%;
    max-width: 1400px;
    margin: 0 auto;
    padding: 3rem 1rem;
    font-family: "Inter", system-ui, -apple-system, sans-serif;
    /* background: linear-gradient(135deg, #1a1a1a 0%, #2d1810 40%, #3d2414 100%); */
  }

  /* Warm Restaurant Theme */
  .restaurant-carousel.warm {
    --bg-primary: #fef7ed;
    --bg-secondary: #fff8f1;
    --bg-card: linear-gradient(135deg, #ffffff 0%, #fef3e2 100%);
    --text-primary: #7c2d12;
    --text-secondary: #a16207;
    --accent-primary: #ea580c;
    --accent-hover: #dc2626;
    --border-color: rgba(251, 146, 60, 0.2);
    --shadow-color: rgba(234, 88, 12, 0.15);
    --price-bg: #fed7aa;
    --price-text: #9a3412;
  }

  /* Elegant Theme */
  .restaurant-carousel.elegant {
    --bg-primary: #1a1a1a;
    --bg-secondary: #2d2d2d;
    --bg-card: linear-gradient(135deg, #2d2d2d 0%, #1f1f1f 100%);
    --text-primary: #f5f5f5;
    --text-secondary: #d4af37;
    --accent-primary: #d4af37;
    --accent-hover: #b8941f;
    --border-color: rgba(212, 175, 55, 0.3);
    --shadow-color: rgba(212, 175, 55, 0.2);
    --price-bg: rgba(212, 175, 55, 0.1);
    --price-text: #d4af37;
  }

  /* Modern Theme */
  .restaurant-carousel.modern {
    --bg-primary: #f8fafc;
    --bg-secondary: #ffffff;
    --bg-card: linear-gradient(135deg, #ffffff 0%, #f1f5f9 100%);
    --text-primary: #1e293b;
    --text-secondary: #64748b;
    --accent-primary: #0f766e;
    --accent-hover: #0d9488;
    --border-color: rgba(15, 118, 110, 0.2);
    --shadow-color: rgba(15, 118, 110, 0.1);
    --price-bg: #ccfbf1;
    --price-text: #0f766e;
  }

  .carousel-container {
    position: relative;
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  .carousel-viewport {
    flex: 1;
    overflow: hidden;
    border-radius: var(--carousel-border-radius);
    background: var(--bg-secondary);
    backdrop-filter: blur(20px);
    border: 1px solid var(--border-color);
    box-shadow: var(--carousel-shadow);
    padding: 1.5rem 0;
  }

  .carousel-track {
    display: flex;
    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: transform;
  }

  .experience-card {
    flex: 0 0 auto;
    background: var(--bg-card);
    border: 1px solid var(--border-color);
    border-radius: 20px;
    padding: 2.5rem;
    margin: 0 0.75rem;
    box-shadow: 0 8px 25px rgba(var(--shadow-color), 0.12);
    transition: var(--carousel-transition);
    cursor: pointer;
    outline: none;
    display: flex;
    flex-direction: column;
    position: relative;
    overflow: hidden;
    width: 380px;
    min-height: 400px;
  }

  .experience-card::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, var(--accent-primary), var(--accent-hover));
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .card-decoration {
    position: absolute;
    top: -50%;
    right: -50%;
    width: 200px;
    height: 200px;
    background: radial-gradient(circle, rgba(var(--accent-primary), 0.1) 0%, transparent 70%);
    border-radius: 50%;
    transition: transform 0.6s ease;
    pointer-events: none;
  }

  .experience-card:hover .card-decoration {
    transform: translate(-25%, 25%) scale(1.5);
  }

  .experience-card:hover::before,
  .experience-card:focus-visible::before {
    opacity: 1;
  }

  .experience-card:hover,
  .experience-card:focus-visible {
    transform: translateY(-12px) scale(var(--card-hover-scale));
    box-shadow: 0 25px 50px rgba(var(--shadow-color), 0.25);
    border-color: var(--accent-primary);
  }

  .card-header {
    display: flex;
    align-items: flex-start;
    gap: 1.25rem;
    margin-bottom: 1.5rem;
  }

  .card-icon {
    font-size: 2.5rem;
    filter: drop-shadow(0 4px 8px rgba(var(--shadow-color), 0.3));
    flex-shrink: 0;
  }

  .title-price {
    flex: 1;
  }

  .card-title {
    color: var(--text-primary);
    font-weight: 700;
    font-size: 1.375rem;
    line-height: 1.3;
    margin: 0 0 0.5rem 0;
    background: linear-gradient(135deg, var(--text-primary), var(--accent-primary));
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .card-price {
    display: inline-block;
    background: var(--price-bg);
    color: var(--price-text);
    font-size: 0.875rem;
    font-weight: 600;
    padding: 0.375rem 0.75rem;
    border-radius: 12px;
    border: 1px solid var(--border-color);
  }

  .card-blurb {
    color: var(--text-secondary);
    line-height: 1.7;
    margin: 0 0 2rem 0;
    flex-grow: 1;
    font-size: 0.95rem;
  }

  .card-cta {
    background: linear-gradient(135deg, var(--accent-primary), var(--accent-hover));
    color: white;
    border: none;
    border-radius: 14px;
    padding: 1rem 1.75rem;
    font-weight: 600;
    font-size: 0.95rem;
    cursor: pointer;
    transition: var(--carousel-transition);
    align-self: flex-start;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    position: relative;
    overflow: hidden;
    box-shadow: 0 4px 14px rgba(var(--accent-primary), 0.3);
  }

  .card-cta::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.7s ease;
  }

  .card-cta:hover::before {
    left: 100%;
  }

  .card-cta:hover {
    transform: translateY(-3px);
    box-shadow: 0 12px 30px rgba(var(--accent-primary), 0.4);
  }

  .cta-arrow {
    transition: transform 0.3s ease;
  }

  .card-cta:hover .cta-arrow {
    transform: translate(3px, -3px);
  }

  .carousel-btn {
    background: var(--bg-card);
    border: 1px solid var(--border-color);
    border-radius: 50%;
    width: 4rem;
    height: 4rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: var(--carousel-transition);
    color: var(--text-primary);
    z-index: 10;
    box-shadow: 0 8px 25px rgba(var(--shadow-color), 0.15);
    flex-shrink: 0;
    backdrop-filter: blur(10px);
  }

  .carousel-btn:disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }

  .carousel-btn:not(:disabled):hover {
    background: var(--accent-primary);
    color: white;
    transform: scale(1.15);
    box-shadow: 0 15px 35px rgba(var(--accent-primary), 0.4);
  }

  .carousel-dots {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 2.5rem;
  }

  .dot {
    width: 14px;
    height: 14px;
    border-radius: 50%;
    border: 2px solid var(--border-color);
    background: transparent;
    cursor: pointer;
    transition: var(--carousel-transition);
    position: relative;
  }

  .dot.active,
  .dot:hover {
    background: var(--accent-primary);
    border-color: var(--accent-primary);
    transform: scale(1.3);
    box-shadow: 0 4px 12px rgba(var(--accent-primary), 0.4);
  }

  /* Responsive Design */
  @media (max-width: 640px) {
    .experience-card {
      width: 300px;
      padding: 2rem;
    }

    .carousel-container {
      gap: 1rem;
    }

    .carousel-btn {
      width: 3.5rem;
      height: 3.5rem;
    }
  }

  @media (min-width: 641px) and (max-width: 768px) {
    .experience-card {
      width: 320px;
    }
  }

  @media (min-width: 769px) and (max-width: 1024px) {
    .experience-card {
      width: 350px;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .carousel-track,
    .experience-card,
    .carousel-btn,
    .card-cta,
    .card-decoration {
      transition: none;
    }
  }
</style>

<script define:vars={{ experiences, autoplayDelay, showDots }}>
  class RestaurantCarousel {
    constructor() {
      this.currentIndex = 0;
      this.totalCards = experiences.length;
      this.cardsToShow = 1;
      this.cardWidth = 0;
      this.cardMargin = 0;
      this.autoplayTimer = null;
      this.autoplayDelay = autoplayDelay;
      this.isTransitioning = false;
      this.showDots = showDots;
      this.experiences = experiences;
      this.totalPages = 1;
      
      this.init();
    }

    init() {
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", () => this.setup());
      } else {
        this.setup();
      }
    }

    setup() {
      this.carousel = document.querySelector("[data-carousel]");
      this.track = document.querySelector("[data-track]");
      this.viewport = document.querySelector("[data-viewport]");
      this.prevBtn = document.querySelector("[data-prev-btn]");
      this.nextBtn = document.querySelector("[data-next-btn]");
      this.dotsContainer = document.querySelector("[data-dots]");

      if (!this.carousel || !this.track || !this.viewport || !this.prevBtn || !this.nextBtn) {
        console.error("Restaurant carousel elements not found");
        return;
      }

      this.createCards();
      this.calculateLayout();
      this.createDots();
      this.setupEventListeners();
      this.setupResizeObserver();
      this.updateView();
      this.updateButtons();
      this.startAutoplay();
    }

    createCards() {
      this.track.innerHTML = '';
      
      this.experiences.forEach((experience, index) => {
        const card = document.createElement('article');
        card.className = 'experience-card';
        card.setAttribute('data-card', '');
        card.setAttribute('data-index', index);
        card.setAttribute('tabindex', '0');
        card.setAttribute('role', 'button');
        card.setAttribute('aria-label', `Learn about ${experience.title}`);

        card.innerHTML = `
          <div class="card-header">
            <span class="card-icon" aria-hidden="true">${experience.icon}</span>
            <div class="title-price">
              <h3 class="card-title">${experience.title}</h3>
              <span class="card-price">${experience.price}</span>
            </div>
          </div>
          <p class="card-blurb">${experience.blurb}</p>
          <button class="card-cta" type="button">
            ${experience.cta}
            <svg class="cta-arrow" width="16" height="16" viewBox="0 0 24 24" fill="none">
              <path d="M7 17L17 7M17 7H7M17 7V17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </button>
          <div class="card-decoration" aria-hidden="true"></div>
        `;

        this.track.appendChild(card);
      });

      this.cards = this.track.querySelectorAll('[data-card]');
    }

    calculateLayout() {
      if (!this.cards.length) return;

      const firstCard = this.cards[0];
      const rect = firstCard.getBoundingClientRect();
      const computedStyle = getComputedStyle(firstCard);
      
      this.cardWidth = rect.width;
      this.cardMargin = parseFloat(computedStyle.marginLeft) + parseFloat(computedStyle.marginRight);
      
      const viewportWidth = this.viewport.getBoundingClientRect().width;
      const viewportPadding = 48;
      const availableWidth = viewportWidth - viewportPadding;
      
      const cardPlusMargin = this.cardWidth + this.cardMargin;
      this.cardsToShow = Math.floor(availableWidth / cardPlusMargin);
      this.cardsToShow = Math.max(1, this.cardsToShow);
      this.totalPages = Math.ceil(this.totalCards / this.cardsToShow);
    }

    createDots() {
      if (!this.showDots || !this.dotsContainer) return;
      
      this.dotsContainer.innerHTML = '';
      
      for (let i = 0; i < this.totalPages; i++) {
        const dot = document.createElement('button');
        dot.className = 'dot';
        dot.setAttribute('data-dot', '');
        dot.setAttribute('data-page', i);
        dot.setAttribute('aria-label', `Go to page ${i + 1}`);
        dot.setAttribute('type', 'button');
        
        dot.addEventListener('click', () => this.goToPage(i));
        this.dotsContainer.appendChild(dot);
      }

      this.dots = this.dotsContainer.querySelectorAll('[data-dot]');
    }

    setupEventListeners() {
      this.prevBtn.addEventListener("click", () => this.prev());
      this.nextBtn.addEventListener("click", () => this.next());

      this.carousel.addEventListener("keydown", (e) => {
        if (e.key === "ArrowLeft") {
          e.preventDefault();
          this.prev();
        } else if (e.key === "ArrowRight") {
          e.preventDefault();
          this.next();
        }
      });

      this.carousel.addEventListener("mouseenter", () => this.pauseAutoplay());
      this.carousel.addEventListener("mouseleave", () => this.resumeAutoplay());
      this.carousel.addEventListener("focusin", () => this.pauseAutoplay());
      this.carousel.addEventListener("focusout", () => this.resumeAutoplay());

      this.setupTouchEvents();
    }

    setupTouchEvents() {
      let startX = 0;
      let currentX = 0;
      let isDragging = false;
      let startTransform = 0;

      const handleStart = (clientX) => {
        if (this.isTransitioning) return;
        isDragging = true;
        startX = clientX;
        currentX = clientX;
        startTransform = this.getCurrentTransform();
        this.pauseAutoplay();
        this.track.style.transition = "none";
      };

      const handleMove = (clientX) => {
        if (!isDragging) return;
        currentX = clientX;
        const deltaX = currentX - startX;
        const newTransform = startTransform + deltaX;
        this.track.style.transform = `translateX(${newTransform}px)`;
      };

      const handleEnd = () => {
        if (!isDragging) return;
        isDragging = false;
        this.track.style.transition = "transform 0.6s cubic-bezier(0.4, 0, 0.2, 1)";

        const deltaX = currentX - startX;
        const threshold = this.cardWidth * 0.25;

        if (Math.abs(deltaX) > threshold) {
          if (deltaX > 0) {
            this.prev();
          } else {
            this.next();
          }
        } else {
          this.updateView();
        }

        setTimeout(() => this.resumeAutoplay(), 150);
      };

      this.track.addEventListener("mousedown", (e) => {
        e.preventDefault();
        handleStart(e.clientX);
      });

      document.addEventListener("mousemove", (e) => handleMove(e.clientX));
      document.addEventListener("mouseup", handleEnd);

      this.track.addEventListener("touchstart", (e) => {
        handleStart(e.touches[0].clientX);
      }, { passive: true });

      this.track.addEventListener("touchmove", (e) => {
        if (isDragging) {
          e.preventDefault();
          handleMove(e.touches[0].clientX);
        }
      });

      this.track.addEventListener("touchend", handleEnd);
    }

    setupResizeObserver() {
      if (window.ResizeObserver) {
        const resizeObserver = new ResizeObserver(() => {
          this.calculateLayout();
          this.createDots();
          if (this.currentIndex >= this.totalPages) {
            this.currentIndex = Math.max(0, this.totalPages - 1);
          }
          this.updateView();
          this.updateButtons();
        });
        resizeObserver.observe(this.viewport);
      } else {
        window.addEventListener("resize", () => {
          setTimeout(() => {
            this.calculateLayout();
            this.createDots();
            if (this.currentIndex >= this.totalPages) {
              this.currentIndex = Math.max(0, this.totalPages - 1);
            }
            this.updateView();
            this.updateButtons();
          }, 100);
        });
      }
    }

    getCurrentTransform() {
      const style = getComputedStyle(this.track);
      const matrix = style.transform;
      if (matrix === "none") return 0;
      const values = matrix.match(/matrix.*\((.+)\)/)[1].split(", ");
      return parseFloat(values[4]) || 0;
    }

    getCurrentPage() {
      return Math.floor(this.currentIndex / this.cardsToShow);
    }

    updateView() {
      const startIndex = this.currentIndex;
      const scrollDistance = this.cardWidth + this.cardMargin;
      const offset = -startIndex * scrollDistance;

      this.track.style.transform = `translateX(${offset}px)`;
      this.updateDots();
    }

    updateDots() {
      if (!this.showDots || !this.dots) return;

      const currentPage = this.getCurrentPage();
      this.dots.forEach((dot, index) => {
        dot.classList.toggle("active", index === currentPage);
      });
    }

    updateButtons() {
      if (!this.prevBtn || !this.nextBtn) return;

      const currentPage = this.getCurrentPage();
      
      this.prevBtn.disabled = currentPage === 0;
      this.nextBtn.disabled = currentPage >= this.totalPages - 1;
    }

    goToPage(pageIndex) {
      if (this.isTransitioning || pageIndex < 0 || pageIndex >= this.totalPages) return;
      
      this.currentIndex = pageIndex * this.cardsToShow;
      this.isTransitioning = true;
      
      setTimeout(() => {
        this.isTransitioning = false;
      }, 600);
      
      this.updateView();
      this.updateButtons();
    }

    next() {
      if (this.isTransitioning) return;
      
      const currentPage = this.getCurrentPage();
      if (currentPage < this.totalPages - 1) {
        this.goToPage(currentPage + 1);
      }
    }

    prev() {
      if (this.isTransitioning) return;
      
      const currentPage = this.getCurrentPage();
      if (currentPage > 0) {
        this.goToPage(currentPage - 1);
      }
    }

    startAutoplay() {
      if (window.matchMedia("(prefers-reduced-motion: reduce)").matches) return;

      this.autoplayTimer = setTimeout(() => {
        const currentPage = this.getCurrentPage();
        if (currentPage < this.totalPages - 1) {
          this.next();
        } else {
          this.goToPage(0);
        }
        this.startAutoplay();
      }, this.autoplayDelay);
    }

    pauseAutoplay() {
      if (this.autoplayTimer) {
        clearTimeout(this.autoplayTimer);
        this.autoplayTimer = null;
      }
    }

    resumeAutoplay() {
      if (!window.matchMedia("(prefers-reduced-motion: reduce)").matches) {
        this.startAutoplay();
      }
    }
  }

  new RestaurantCarousel();
</script>